)
results2 <- data.frame(Model = c('Logistic Regression', 'Decision Tree', 'Support Vector Machine'),
Accuracy = c(accuracy,rpart_acc2,svm_acc2))
results2
generate_three_spirals <- function(){
set.seed(42)
n <- 500
noise <- 0.2
t <- (1:n) / n * 2 * pi
x1 <- c(
t * (sin(t) + rnorm(n, 0, noise)),
t * (sin(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (sin(t + 4 * pi/3) + rnorm(n, 0, noise))
)
x2 <- c(
t * (cos(t) + rnorm(n, 0, noise)),
t * (cos(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (cos(t + 4 * pi/3) + rnorm(n, 0, noise))
)
y <- as.factor(
c(
rep(0, n),
rep(1, n),
rep(2, n)
)
)
return(tibble(x1=x1, x2=x2, y=y))
}
df <- generate_three_spirals()
plot(
df$x1, df$x2,
col = df$y,
pch = 20
)
grid <- expand.grid(
x1 = seq(-10, 10, length.out = 100),
x2 = seq(-10, 10, length.out = 100)
)
df_test <- as.tibble(grid)
library(tibble)
grid <- expand.grid(
x1 = seq(-10, 10, length.out = 100),
x2 = seq(-10, 10, length.out = 100)
)
df_test <- as.tibble(grid)
library(tibble)
grid <- expand.grid(
x1 = seq(-10, 10, length.out = 100),
x2 = seq(-10, 10, length.out = 100)
)
df_test <- as_tibble(grid)
rpart_fit <- rpart(y ~ x1 + x2, data = df, method = "class")
rpart_classes <- predict(rpart_fit, newdata = df_test, type = "class")
plot_decision_boundary <- function(predictions){
plot(
df_test$x1, df_test$x2,
col = predictions,
pch = 0
)
points(
df$x1, df$x2,
col = df$y,
pch = 20
)
}
plot_decision_boundary(rpart_classes)
svm_fit <- svm_fit <- svm(y ~ x1 + x2, data = df, kernel = "radial", type = "C-classification")
svm_classes <- predict(svm_fit, newdata = df_test)
plot_decision_boundary(svm_classes)
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_tanh()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
2, 10, 3
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.01
) %>%
set_opt_params(
set_opt_params(
opt_algo = "sgd"
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
dataloader_options = list(batch_size = 128, shuffle = TRUE)
verbose = FALSE
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_tanh()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
2, 10, 3
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.01
) %>%
set_opt_params(
set_opt_params(
opt_algo = "sgd"
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
dataloader_options = list(batch_size = 128, shuffle = TRUE)
verbose = FALSE
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_tanh()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
2, 10, 3
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.01
) %>%
set_opt_params(
set_opt_params(
opt_algo = "sgd"
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
))
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_tanh()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
2, 10, 3
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.01
) %>%
set_opt_params(
set_opt_params(
opt_algo = "sgd"
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
verbose = FALSE,
dataloader_options = list(batch_size = 128, shuffle = TRUE)
))
library(luz)
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_tanh()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
2, 10, 3
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.01
) %>%
set_opt_params(
set_opt_params(
opt_algo = "sgd"
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
verbose = FALSE,
dataloader_options = list(batch_size = 128, shuffle = TRUE)
))
install.packages("luz")
library(luz)
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_tanh()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
2, 10, 3
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.01
) %>%
set_opt_params(
set_opt_params(
opt_algo = "sgd"
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
verbose = FALSE,
dataloader_options = list(batch_size = 128, shuffle = TRUE)
))
rm(list=ls())
packages <- c(
"dplyr",
"readr",
"tidyr",
"purrr",
"broom",
"magrittr",
"corrplot",
"caret",
"rpart",
"rpart.plot",
"e1071",
"torch",
"luz"
)
#renv::install(packages)
sapply(packages, require, character.only=T)
generate_three_spirals <- function(){
set.seed(42)
n <- 500
noise <- 0.2
t <- (1:n) / n * 2 * pi
x1 <- c(
t * (sin(t) + rnorm(n, 0, noise)),
t * (sin(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (sin(t + 4 * pi/3) + rnorm(n, 0, noise))
)
x2 <- c(
t * (cos(t) + rnorm(n, 0, noise)),
t * (cos(t + 2 * pi/3) + rnorm(n, 0, noise)),
t * (cos(t + 4 * pi/3) + rnorm(n, 0, noise))
)
y <- as.factor(
c(
rep(0, n),
rep(1, n),
rep(2, n)
)
)
return(tibble(x1=x1, x2=x2, y=y))
}
df <- generate_three_spirals()
plot(
df$x1, df$x2,
col = df$y,
pch = 20
)
library(tibble)
grid <- expand.grid(
x1 = seq(-10, 10, length.out = 100),
x2 = seq(-10, 10, length.out = 100)
)
df_test <- as_tibble(grid)
rpart_fit <- rpart(y ~ x1 + x2, data = df, method = "class")
rpart_classes <- predict(rpart_fit, newdata = df_test, type = "class")
plot_decision_boundary <- function(predictions){
plot(
df_test$x1, df_test$x2,
col = predictions,
pch = 0
)
points(
df$x1, df$x2,
col = df$y,
pch = 20
)
}
plot_decision_boundary(rpart_classes)
svm_fit <- svm_fit <- svm(y ~ x1 + x2, data = df, kernel = "radial", type = "C-classification")
svm_classes <- predict(svm_fit, newdata = df_test)
plot_decision_boundary(svm_classes)
library(luz)
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_linear(p, q1)
self$output <- nn_linear(q1, o)
self$activation <- nn_tanh()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
2, 10, 3
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.01
) %>%
set_opt_params(
set_opt_params(
opt_algo = "sgd"
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
verbose = FALSE,
dataloader_options = list(batch_size = 128, shuffle = TRUE)
))
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_layer(q1, p)
self$output <- nn_layer(o, q1)
self$activation <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
input_shape = ncol(df) - 1,
output_shape = 3,
hidden_shapes = list(q1 = 10)
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.001
) %>%
set_optimizer(
"adam",
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_layer(q1, p)
self$output <- nn_layer(o, q1)
self$activation <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
input_shape = ncol(df) - 1,
output_shape = 3,
hidden_shapes = list(q1 = 10)
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.001
) %>%
set_optimizers(
"adam",
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
library(torch)
library(luz)
NN1 <- nn_module(
initialize = function(p, q1, o){
self$hidden1 <- nn_layer(q1, p)
self$output <- nn_layer(o, q1)
self$activation <- nn_sigmoid()
},
forward = function(x){
x %>%
self$hidden1() %>%
self$activation() %>%
self$output()
}
)
fit_1 <- NN1 %>%
setup(
input_shape = ncol(df) - 1,
output_shape = 3,
hidden_shapes = list(q1 = 10)
) %>%
set_hparams(
epochs = 50,
learning_rate = 0.001
) %>%
set_optimizers(
"adam",
lr = 0.001
) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix
fit_1_predictions <- predict(fit_1, test_matrix) %>%
argmax(2) %>%
as.integer()
install.packages("ramify")
test_matrix <- df_test %>% select(x1, x2) %>% as.matrix
library(ramify)
fit_1_predictions <- predict(fit_1, test_matrix) %>%
argmax(2) %>%
as.integer()
NN0 <- nn_module(
initialize = function(p, o){
self$output <- nn_layer(o)
},
forward = function(x){
x %>%
self$output()
}
)
fit_0 <- NN0 %>%
setup(input_size = 2, output_size = 3) %>%
set_hparams(units = NULL, loss = nn_ce_loss, epochs = 50) %>%
set_optimizers(adam_optimizer(learning_rate = 0.01)) %>%
fit(
data = list(
df %>% select(x1, x2) %>% as.matrix,
df$y %>% as.integer
),
dataloader_options = list(batch_size = 128, shuffle = TRUE),
verbose = FALSE
)
